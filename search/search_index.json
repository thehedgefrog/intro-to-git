{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! \u00b6 Introduction \u00b6 This is a simple site to help you get started with Git and to setup a development environment on your PC or Mac. About version control and Git \u00b6 A version control system, or VCS, tracks the history of changes as people and teams collaborate on projects together. As developers make changes to the project, any earlier version of the project can be recovered at any time. Developers can review project history to find out: Which changes were made? Who made the changes? When were the changes made? Why were changes needed? VCSs give each contributor a unified and consistent view of a project, surfacing work that's already in progress. Seeing a transparent history of changes, who made them, and how they contribute to the development of a project helps team members stay aligned while working independently. In a distributed version control system, every developer has a full copy of the project and project history. Unlike once popular centralized version control systems, DVCSs don't need a constant connection to a central repository. Git is the most popular distributed version control system. Git is commonly used for both open source and commercial software development, with significant benefits for individuals, teams and businesses. Git lets developers see the entire timeline of their changes, decisions, and progression of any project in one place. From the moment they access the history of a project, the developer has all the context they need to understand it and start contributing. Developers work in every time zone. With a DVCS like Git, collaboration can happen any time while maintaining source code integrity. Using branches, developers can safely propose changes to production code. Businesses using Git can break down communication barriers between teams and keep them focused on doing their best work. Plus, Git makes it possible to align experts across a business to collaborate on major projects. About repositories \u00b6 A repository, or Git project, encompasses the entire collection of files and folders associated with a project, along with each file's revision history. The file history appears as snapshots in time called commits. The commits can be organized into multiple lines of development called branches. Because Git is a DVCS, repositories are self-contained units and anyone who has a copy of the repository can access the entire codebase and its history. Using the command line or other ease-of-use interfaces, a Git repository also allows for: interaction with the history, cloning the repository, creating branches, committing, merging, comparing changes across versions of code, and more. Ready to get started? \u00b6 Just click next below!","title":"Getting Started"},{"location":"#welcome","text":"","title":"Welcome!"},{"location":"#introduction","text":"This is a simple site to help you get started with Git and to setup a development environment on your PC or Mac.","title":"Introduction"},{"location":"#about-version-control-and-git","text":"A version control system, or VCS, tracks the history of changes as people and teams collaborate on projects together. As developers make changes to the project, any earlier version of the project can be recovered at any time. Developers can review project history to find out: Which changes were made? Who made the changes? When were the changes made? Why were changes needed? VCSs give each contributor a unified and consistent view of a project, surfacing work that's already in progress. Seeing a transparent history of changes, who made them, and how they contribute to the development of a project helps team members stay aligned while working independently. In a distributed version control system, every developer has a full copy of the project and project history. Unlike once popular centralized version control systems, DVCSs don't need a constant connection to a central repository. Git is the most popular distributed version control system. Git is commonly used for both open source and commercial software development, with significant benefits for individuals, teams and businesses. Git lets developers see the entire timeline of their changes, decisions, and progression of any project in one place. From the moment they access the history of a project, the developer has all the context they need to understand it and start contributing. Developers work in every time zone. With a DVCS like Git, collaboration can happen any time while maintaining source code integrity. Using branches, developers can safely propose changes to production code. Businesses using Git can break down communication barriers between teams and keep them focused on doing their best work. Plus, Git makes it possible to align experts across a business to collaborate on major projects.","title":"About version control and Git"},{"location":"#about-repositories","text":"A repository, or Git project, encompasses the entire collection of files and folders associated with a project, along with each file's revision history. The file history appears as snapshots in time called commits. The commits can be organized into multiple lines of development called branches. Because Git is a DVCS, repositories are self-contained units and anyone who has a copy of the repository can access the entire codebase and its history. Using the command line or other ease-of-use interfaces, a Git repository also allows for: interaction with the history, cloning the repository, creating branches, committing, merging, comparing changes across versions of code, and more.","title":"About repositories"},{"location":"#ready-to-get-started","text":"Just click next below!","title":"Ready to get started?"},{"location":"setup-gpg/","text":"Set up GPG \u00b6 Generate a GPG key pair \u00b6 To start, generate a new GPG key pair (public and private): gpg --full-gen-key Configure the key with: Kind of key: type 4 for (4) RSA (sign only) Keysize: 4096 Expiration: choose a reasonable value, for example 2y for 2 years (it can be renewed) Then answer a few questions: Your real name. You could use your GitHub username here if you\u2019d like. Email address. If you plan to use this key for more than just Git, you might want to put your real email address. If it\u2019s just for GitHub, you can use the @users.noreply.github.com email that GitHub generates for you: you can find it on the Email settings page. You will be asked to type a passphrase which is used to encrypt your secret key on disk. This is important, otherwise attackers could steal your secret key, and then they\u2019d be able to sign messages and Git commits pretending to be you. You can verify your key was created with: $ gpg --list-secret-keys --keyid-format SHORT /root/.gnupg/pubring.kbx ------------------------ sec rsa4096/674CB45A 2020-05-16 [SC] [expires: 2022-05-16] 65B8A7455C949E73FC3B7330C16132F5674CB45A uid [ultimate] ItalyPaleAle-demo <43508+ItalyPaleAle@users.noreply.github.com> In the example above, my new key ID is rsa4096/674CB45A , or just 674CB45A . You can confirm that GPG is working and able to sign messages with: echo \"hello world\" | gpg --clearsign Configure Git to sign your commits \u00b6 Once you have your private key, you can configure Git to sign your commits with that: Replace 674CB45A with your key ID git config --global user.signingkey 674CB45A Now, you can sign Git commits and tags with: Add the -S flag when creating a commit: git commit -S Create a tag with git tag -s rather than git tag -a You can also tell Git to automatically sign all your commits: git config --global commit.gpgSign true git config --global tag.gpgSign true Adding the GPG key to GitHub \u00b6 In order for GitHub to accept your GPG key and show your commits as \u201cverified\u201d, you first need to ensure that the email address you use when committing a code change is both included in the GPG key and verified on GitHub. To set what email address Git uses when creating a commit use: git config --global user.email your@email.com You can use your @users.noreply.github.com email (from the Email settings page on GitHub) or any other email address that is added to your GitHub account and verified (in the same settings page). If it\u2019s not already, that same email address must also be added to your GPG key, as per instructions above. Once you\u2019ve done it, upload your public GPG key to GitHub and associate it with your account. In the SSH and GPG Keys settings page, add a new GPG key and paste your public key, which you can get with: Replace 674CB45A with your key ID gpg --armor --export 674CB45A Your public GPG key begins with -----BEGIN PGP PUBLIC KEY BLOCK----- and ends with -----END PGP PUBLIC KEY BLOCK----- . Making a signed commit \u00b6 After configuring all of the above, your Git commits can now be signed with your GPG key: Add the -S flag if you did not configure Git to sign commits by default git commit -a -m \"Making my first signed commit\" You can check that the commit was signed with: $ git log --show-signature -1 commit 8beed807e820d34cc7a35a0d69e9913bed7b1b03 (HEAD -> master) gpg: Signature made Sun May 17 01:44:55 2020 UTC gpg: using RSA key 674CB45A gpg: Good signature from \"ItalyPaleAle-demo <43508+ItalyPaleAle@users.noreply.github.com>\" [ultimate] Author: ItalyPaleAle-demo <43508+ItalyPaleAle@users.noreply.github.com> Date: Sun May 17 01:44:55 2020 +0000 Making my first signed commit","title":"Set up GPG"},{"location":"setup-gpg/#set-up-gpg","text":"","title":"Set up GPG"},{"location":"setup-gpg/#generate-a-gpg-key-pair","text":"To start, generate a new GPG key pair (public and private): gpg --full-gen-key Configure the key with: Kind of key: type 4 for (4) RSA (sign only) Keysize: 4096 Expiration: choose a reasonable value, for example 2y for 2 years (it can be renewed) Then answer a few questions: Your real name. You could use your GitHub username here if you\u2019d like. Email address. If you plan to use this key for more than just Git, you might want to put your real email address. If it\u2019s just for GitHub, you can use the @users.noreply.github.com email that GitHub generates for you: you can find it on the Email settings page. You will be asked to type a passphrase which is used to encrypt your secret key on disk. This is important, otherwise attackers could steal your secret key, and then they\u2019d be able to sign messages and Git commits pretending to be you. You can verify your key was created with: $ gpg --list-secret-keys --keyid-format SHORT /root/.gnupg/pubring.kbx ------------------------ sec rsa4096/674CB45A 2020-05-16 [SC] [expires: 2022-05-16] 65B8A7455C949E73FC3B7330C16132F5674CB45A uid [ultimate] ItalyPaleAle-demo <43508+ItalyPaleAle@users.noreply.github.com> In the example above, my new key ID is rsa4096/674CB45A , or just 674CB45A . You can confirm that GPG is working and able to sign messages with: echo \"hello world\" | gpg --clearsign","title":"Generate a GPG key pair"},{"location":"setup-gpg/#configure-git-to-sign-your-commits","text":"Once you have your private key, you can configure Git to sign your commits with that: Replace 674CB45A with your key ID git config --global user.signingkey 674CB45A Now, you can sign Git commits and tags with: Add the -S flag when creating a commit: git commit -S Create a tag with git tag -s rather than git tag -a You can also tell Git to automatically sign all your commits: git config --global commit.gpgSign true git config --global tag.gpgSign true","title":"Configure Git to sign your commits"},{"location":"setup-gpg/#adding-the-gpg-key-to-github","text":"In order for GitHub to accept your GPG key and show your commits as \u201cverified\u201d, you first need to ensure that the email address you use when committing a code change is both included in the GPG key and verified on GitHub. To set what email address Git uses when creating a commit use: git config --global user.email your@email.com You can use your @users.noreply.github.com email (from the Email settings page on GitHub) or any other email address that is added to your GitHub account and verified (in the same settings page). If it\u2019s not already, that same email address must also be added to your GPG key, as per instructions above. Once you\u2019ve done it, upload your public GPG key to GitHub and associate it with your account. In the SSH and GPG Keys settings page, add a new GPG key and paste your public key, which you can get with: Replace 674CB45A with your key ID gpg --armor --export 674CB45A Your public GPG key begins with -----BEGIN PGP PUBLIC KEY BLOCK----- and ends with -----END PGP PUBLIC KEY BLOCK----- .","title":"Adding the GPG key to GitHub"},{"location":"setup-gpg/#making-a-signed-commit","text":"After configuring all of the above, your Git commits can now be signed with your GPG key: Add the -S flag if you did not configure Git to sign commits by default git commit -a -m \"Making my first signed commit\" You can check that the commit was signed with: $ git log --show-signature -1 commit 8beed807e820d34cc7a35a0d69e9913bed7b1b03 (HEAD -> master) gpg: Signature made Sun May 17 01:44:55 2020 UTC gpg: using RSA key 674CB45A gpg: Good signature from \"ItalyPaleAle-demo <43508+ItalyPaleAle@users.noreply.github.com>\" [ultimate] Author: ItalyPaleAle-demo <43508+ItalyPaleAle@users.noreply.github.com> Date: Sun May 17 01:44:55 2020 +0000 Making my first signed commit","title":"Making a signed commit"},{"location":"system-setup/","text":"Setting up your system \u00b6 Here are things that you must, and things that you should, install on your system. IDE \u00b6 An integrated development environment is a software application that provides comprehensive facilities to computer programmers for software development. Recommended: Visual Studio Code Want to encourage me? Check out my free themes for VSCode! Great White Hammerhead Blue Whale Terminal Emulator \u00b6 A terminal emulator, terminal application, or term, is a computer program that emulates a video terminal within some other display architecture. Though typically synonymous with a shell or text terminal, the term terminal covers all remote terminals, including graphical interfaces. This is optional, but highly recommended! Windows macOS Windows Terminal PowerShell Windows Subsystem for Linux Ubuntu iTerm2 Git \u00b6 Git needs to be installed on your system. This can be done by command line, on the terminal emulator we just installed. Windows macOS WSL - Ubuntu Install Git for Windows git --version sudo apt install git-all GPG and Signing Commits \u00b6 Why should I sign my commits? This article explains why you should be signing every commit. Windows macOS WSL - Ubuntu Install GPG4Win brew install gpg On macOS, you might also want to install a graphical pinentry application with brew install pinentry-mac, then add this line to ~/.gnupg/gpg-agent.conf (if the file doesn\u2019t exist, create it): gpg-agent.conf pinentry-program /usr/local/bin/pinentry-mac Most Linux distributions come with GPG pre-installed; if not, you can always find it on their official repositories. Note that in some Linux distributions, the application is called gpg2, so you might need to replace gpg with gpg2 in the commands below. In this case, you might also need to run git config --global gpg.program $(which gpg2). Additional configuration for Linux and macOS \u00b6 On Linux and macOS, you can enable the GPG agent to avoid having to type the secret key\u2019s password every time. To do that, add this line to ~/.gnupg/gpg.conf (if the file doesn\u2019t exist, create it): gpg.conf # Enable gpg to use the gpg-agent use-agent You will also need to add these two lines to your profile file (~/.bashrc, ~/.bash_profile, ~/.zprofile, or wherever appropriate), then re-launch your shell (or run source ~/.bashrc or similar): export GPG_TTY = $( tty ) gpgconf --launch gpg-agent","title":"Setting up your system"},{"location":"system-setup/#setting-up-your-system","text":"Here are things that you must, and things that you should, install on your system.","title":"Setting up your system"},{"location":"system-setup/#ide","text":"An integrated development environment is a software application that provides comprehensive facilities to computer programmers for software development. Recommended: Visual Studio Code Want to encourage me? Check out my free themes for VSCode! Great White Hammerhead Blue Whale","title":"IDE"},{"location":"system-setup/#terminal-emulator","text":"A terminal emulator, terminal application, or term, is a computer program that emulates a video terminal within some other display architecture. Though typically synonymous with a shell or text terminal, the term terminal covers all remote terminals, including graphical interfaces. This is optional, but highly recommended! Windows macOS Windows Terminal PowerShell Windows Subsystem for Linux Ubuntu iTerm2","title":"Terminal Emulator"},{"location":"system-setup/#git","text":"Git needs to be installed on your system. This can be done by command line, on the terminal emulator we just installed. Windows macOS WSL - Ubuntu Install Git for Windows git --version sudo apt install git-all","title":"Git"},{"location":"system-setup/#gpg-and-signing-commits","text":"Why should I sign my commits? This article explains why you should be signing every commit. Windows macOS WSL - Ubuntu Install GPG4Win brew install gpg On macOS, you might also want to install a graphical pinentry application with brew install pinentry-mac, then add this line to ~/.gnupg/gpg-agent.conf (if the file doesn\u2019t exist, create it): gpg-agent.conf pinentry-program /usr/local/bin/pinentry-mac Most Linux distributions come with GPG pre-installed; if not, you can always find it on their official repositories. Note that in some Linux distributions, the application is called gpg2, so you might need to replace gpg with gpg2 in the commands below. In this case, you might also need to run git config --global gpg.program $(which gpg2).","title":"GPG and Signing Commits"},{"location":"system-setup/#additional-configuration-for-linux-and-macos","text":"On Linux and macOS, you can enable the GPG agent to avoid having to type the secret key\u2019s password every time. To do that, add this line to ~/.gnupg/gpg.conf (if the file doesn\u2019t exist, create it): gpg.conf # Enable gpg to use the gpg-agent use-agent You will also need to add these two lines to your profile file (~/.bashrc, ~/.bash_profile, ~/.zprofile, or wherever appropriate), then re-launch your shell (or run source ~/.bashrc or similar): export GPG_TTY = $( tty ) gpgconf --launch gpg-agent","title":"Additional configuration for Linux and macOS"},{"location":"using-git/","text":"Using Git \u00b6 Basic Git commands \u00b6 To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitKraken. Here are some common commands for using Git: git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control. git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches. git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work. git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit . git status shows the status of changes as untracked, modified, or staged. git branch shows the branches being worked on locally. git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment. git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment. git push updates the remote repository with any commits made locally to a branch. For more information, see the full reference guide to Git commands . Example: Contribute to an existing repository \u00b6 # download a repository on GitHub to our machine # Replace `owner/repo` with the owner and name of the repository to clone git clone https://github.com/owner/repo.git # change into the `repo` directory cd repo # create a new branch to store any new changes git branch my-branch # switch to that branch (line of development) git checkout my-branch # make changes, for example, edit `file1.md` and `file2.md` using the text editor # stage the changed files git add file1.md file2.md # take a snapshot of the staging area (anything that's been added) git commit -m \"my snapshot\" # push changes to github git push --set-upstream origin my-branch Example: Start a new repository and publish it to GitHub \u00b6 First, you will need to create a new repository on GitHub. For more information, see \" Hello World .\" Do not initialize the repository with a README, .gitignore or License file. This empty repository will await your code. # create a new directory, and initialize it with git-specific functions git init my-repo # change into the `my-repo` directory cd my-repo # create the first file in the project touch README.md # git isn't aware of the file, stage it git add README.md # take a snapshot of the staging area git commit -m \"add README to initial commit\" # provide the path for the repository you created on github git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY-NAME.git # push changes to github git push --set-upstream origin main Example: contribute to an existing branch on GitHub \u00b6 This example assumes that you already have a project called repo on the machine and that a new branch has been pushed to GitHub since the last time changes were made locally. # change into the `repo` directory cd repo # update all remote tracking branches, and the currently checked out branch git pull # change into the existing branch called `feature-a` git checkout feature-a # make changes, for example, edit `file1.md` using the text editor # stage the changed file git add file1.md # take a snapshot of the staging area git commit -m \"edit file1\" # push changes to github git push","title":"Using Git"},{"location":"using-git/#using-git","text":"","title":"Using Git"},{"location":"using-git/#basic-git-commands","text":"To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitKraken. Here are some common commands for using Git: git init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control. git clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches. git add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work. git commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit . git status shows the status of changes as untracked, modified, or staged. git branch shows the branches being worked on locally. git merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment. git pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment. git push updates the remote repository with any commits made locally to a branch. For more information, see the full reference guide to Git commands .","title":"Basic Git commands"},{"location":"using-git/#example-contribute-to-an-existing-repository","text":"# download a repository on GitHub to our machine # Replace `owner/repo` with the owner and name of the repository to clone git clone https://github.com/owner/repo.git # change into the `repo` directory cd repo # create a new branch to store any new changes git branch my-branch # switch to that branch (line of development) git checkout my-branch # make changes, for example, edit `file1.md` and `file2.md` using the text editor # stage the changed files git add file1.md file2.md # take a snapshot of the staging area (anything that's been added) git commit -m \"my snapshot\" # push changes to github git push --set-upstream origin my-branch","title":"Example: Contribute to an existing repository"},{"location":"using-git/#example-start-a-new-repository-and-publish-it-to-github","text":"First, you will need to create a new repository on GitHub. For more information, see \" Hello World .\" Do not initialize the repository with a README, .gitignore or License file. This empty repository will await your code. # create a new directory, and initialize it with git-specific functions git init my-repo # change into the `my-repo` directory cd my-repo # create the first file in the project touch README.md # git isn't aware of the file, stage it git add README.md # take a snapshot of the staging area git commit -m \"add README to initial commit\" # provide the path for the repository you created on github git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY-NAME.git # push changes to github git push --set-upstream origin main","title":"Example: Start a new repository and publish it to GitHub"},{"location":"using-git/#example-contribute-to-an-existing-branch-on-github","text":"This example assumes that you already have a project called repo on the machine and that a new branch has been pushed to GitHub since the last time changes were made locally. # change into the `repo` directory cd repo # update all remote tracking branches, and the currently checked out branch git pull # change into the existing branch called `feature-a` git checkout feature-a # make changes, for example, edit `file1.md` using the text editor # stage the changed file git add file1.md # take a snapshot of the staging area git commit -m \"edit file1\" # push changes to github git push","title":"Example: contribute to an existing branch on GitHub"}]}